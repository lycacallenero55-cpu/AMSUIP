-- Migration: Create global_trained_models table
-- This separates global models from individual student models for better organization

CREATE TABLE IF NOT EXISTS public.global_trained_models (
    id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    model_path text NOT NULL,
    s3_key text,
    model_uuid text NOT NULL,
    status text NOT NULL DEFAULT 'training'::text,
    sample_count integer NOT NULL DEFAULT 0,
    genuine_count integer NOT NULL DEFAULT 0,
    forged_count integer NOT NULL DEFAULT 0,
    student_count integer NOT NULL DEFAULT 0,
    training_date timestamp with time zone DEFAULT now(),
    accuracy numeric(5, 4),
    training_metrics jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    version integer DEFAULT 1,
    parent_model_id bigint,
    is_active boolean DEFAULT true,
    version_notes text,
    performance_metrics jsonb,
    far numeric(5, 4),
    frr numeric(5, 4),
    CONSTRAINT global_trained_models_pkey PRIMARY KEY (id),
    CONSTRAINT global_trained_models_status_check CHECK (
        status = ANY (
            ARRAY[
                'training'::text,
                'completed'::text,
                'failed'::text
            ]
        )
    )
) TABLESPACE pg_default;

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_global_trained_models_status 
    ON public.global_trained_models USING btree (status) TABLESPACE pg_default;

CREATE INDEX IF NOT EXISTS idx_global_trained_models_active 
    ON public.global_trained_models USING btree (is_active) TABLESPACE pg_default
    WHERE (is_active = true);

CREATE INDEX IF NOT EXISTS idx_global_trained_models_created_at 
    ON public.global_trained_models USING btree (created_at DESC) TABLESPACE pg_default;

CREATE INDEX IF NOT EXISTS idx_global_trained_models_model_uuid 
    ON public.global_trained_models USING btree (model_uuid) TABLESPACE pg_default;

-- Create trigger for updating updated_at timestamp
CREATE OR REPLACE FUNCTION update_global_trained_models_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_global_trained_models_updated_at
    BEFORE UPDATE ON public.global_trained_models
    FOR EACH ROW
    EXECUTE FUNCTION update_global_trained_models_updated_at();

-- Create trigger for version management (similar to trained_models)
CREATE OR REPLACE FUNCTION update_global_model_version()
RETURNS TRIGGER AS $$
BEGIN
    -- Auto-increment version for new models
    IF TG_OP = 'INSERT' THEN
        NEW.version = 1;
    ELSIF TG_OP = 'UPDATE' THEN
        -- Only increment version if significant fields changed
        IF OLD.status != NEW.status OR 
           OLD.accuracy != NEW.accuracy OR 
           OLD.training_metrics != NEW.training_metrics THEN
            NEW.version = COALESCE(OLD.version, 0) + 1;
        END IF;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_global_model_version
    AFTER INSERT OR UPDATE ON public.global_trained_models
    FOR EACH ROW
    EXECUTE FUNCTION update_global_model_version();

-- Add comments for documentation
COMMENT ON TABLE public.global_trained_models IS 'Stores metadata for global signature verification models that can recognize multiple students';
COMMENT ON COLUMN public.global_trained_models.model_path IS 'Full S3 URL to the model file';
COMMENT ON COLUMN public.global_trained_models.s3_key IS 'S3 object key for direct access (e.g., models/global/uuid.keras)';
COMMENT ON COLUMN public.global_trained_models.model_uuid IS 'Unique identifier for the model file';
COMMENT ON COLUMN public.global_trained_models.student_count IS 'Number of students this global model was trained on';
COMMENT ON COLUMN public.global_trained_models.training_metrics IS 'JSON object containing training history and metrics';
