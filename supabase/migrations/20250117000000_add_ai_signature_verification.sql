-- AI Signature Verification Migration
-- Adds pgvector support and AI signature verification tables

-- Enable pgvector extension
CREATE EXTENSION IF NOT EXISTS vector;

-- Table for storing signature images metadata
CREATE TABLE IF NOT EXISTS public.signature_images (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    student_id BIGINT NOT NULL REFERENCES public.students(id) ON DELETE CASCADE,
    storage_path TEXT NOT NULL,
    public_url TEXT NOT NULL,
    uploaded_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    processed BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Table for storing signature embeddings (512-dimensional vectors)
CREATE TABLE IF NOT EXISTS public.signature_embeddings (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    student_id BIGINT NOT NULL REFERENCES public.students(id) ON DELETE CASCADE,
    image_id BIGINT REFERENCES public.signature_images(id) ON DELETE CASCADE,
    embedding vector(512) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Table for storing per-student signature profiles
CREATE TABLE IF NOT EXISTS public.signature_profiles (
    student_id BIGINT PRIMARY KEY REFERENCES public.students(id) ON DELETE CASCADE,
    status TEXT NOT NULL DEFAULT 'untrained' CHECK (status IN ('untrained', 'training', 'ready', 'error')),
    embedding_centroid vector(512),
    num_samples INTEGER DEFAULT 0,
    threshold REAL DEFAULT 0.35,
    last_trained_at TIMESTAMP WITH TIME ZONE,
    error_message TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Table for logging signature verification events
CREATE TABLE IF NOT EXISTS public.signature_verification_events (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    session_id BIGINT REFERENCES public.sessions(id) ON DELETE SET NULL,
    candidate_student_id BIGINT REFERENCES public.students(id) ON DELETE SET NULL,
    predicted_student_id BIGINT REFERENCES public.students(id) ON DELETE SET NULL,
    score REAL NOT NULL,
    decision TEXT NOT NULL CHECK (decision IN ('match', 'no_match', 'error')),
    image_public_url TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_signature_images_student_id ON public.signature_images(student_id);
CREATE INDEX IF NOT EXISTS idx_signature_images_processed ON public.signature_images(processed);
CREATE INDEX IF NOT EXISTS idx_signature_embeddings_student_id ON public.signature_embeddings(student_id);
CREATE INDEX IF NOT EXISTS idx_signature_embeddings_image_id ON public.signature_embeddings(image_id);

-- Create vector index for similarity search using IVFFlat
CREATE INDEX IF NOT EXISTS idx_signature_embeddings_vector 
ON public.signature_embeddings USING ivfflat (embedding vector_cosine_ops) 
WITH (lists = 100);

CREATE INDEX IF NOT EXISTS idx_signature_profiles_status ON public.signature_profiles(status);
CREATE INDEX IF NOT EXISTS idx_verification_events_session_id ON public.signature_verification_events(session_id);
CREATE INDEX IF NOT EXISTS idx_verification_events_predicted_student ON public.signature_verification_events(predicted_student_id);
CREATE INDEX IF NOT EXISTS idx_verification_events_created_at ON public.signature_verification_events(created_at);

-- Add trigger for updating updated_at on signature_profiles
CREATE TRIGGER update_signature_profiles_updated_at
    BEFORE UPDATE ON public.signature_profiles
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Row Level Security (RLS) Policies
-- Enable RLS on all tables
ALTER TABLE public.signature_images ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.signature_embeddings ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.signature_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.signature_verification_events ENABLE ROW LEVEL SECURITY;

-- Policies for signature_images
CREATE POLICY "Users can view signature_images" ON public.signature_images
    FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Instructors and admins can manage signature_images" ON public.signature_images
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM public.profiles 
            WHERE profiles.id = auth.uid() 
            AND profiles.role IN ('instructor', 'admin')
        )
    );

-- Policies for signature_embeddings
CREATE POLICY "Users can view signature_embeddings" ON public.signature_embeddings
    FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Instructors and admins can manage signature_embeddings" ON public.signature_embeddings
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM public.profiles 
            WHERE profiles.id = auth.uid() 
            AND profiles.role IN ('instructor', 'admin')
        )
    );

-- Policies for signature_profiles
CREATE POLICY "Users can view signature_profiles" ON public.signature_profiles
    FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Instructors and admins can manage signature_profiles" ON public.signature_profiles
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM public.profiles 
            WHERE profiles.id = auth.uid() 
            AND profiles.role IN ('instructor', 'admin')
        )
    );

-- Policies for signature_verification_events
CREATE POLICY "Users can view signature_verification_events" ON public.signature_verification_events
    FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Instructors and admins can manage signature_verification_events" ON public.signature_verification_events
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM public.profiles 
            WHERE profiles.id = auth.uid() 
            AND profiles.role IN ('instructor', 'admin')
        )
    );

-- Service role policies (for the AI service)
CREATE POLICY "Service role can manage signature_images" ON public.signature_images
    FOR ALL USING (auth.role() = 'service_role');

CREATE POLICY "Service role can manage signature_embeddings" ON public.signature_embeddings
    FOR ALL USING (auth.role() = 'service_role');

CREATE POLICY "Service role can manage signature_profiles" ON public.signature_profiles
    FOR ALL USING (auth.role() = 'service_role');

CREATE POLICY "Service role can manage signature_verification_events" ON public.signature_verification_events
    FOR ALL USING (auth.role() = 'service_role');

-- Function for similarity search using pgvector
CREATE OR REPLACE FUNCTION search_similar_signatures(
    query_embedding vector(512),
    match_count integer DEFAULT 5
)
RETURNS TABLE (
    student_id BIGINT,
    distance REAL,
    embedding vector(512)
)
LANGUAGE sql
STABLE
AS $$
    SELECT 
        signature_embeddings.student_id,
        signature_embeddings.embedding <#> query_embedding AS distance,
        signature_embeddings.embedding
    FROM signature_embeddings
    ORDER BY signature_embeddings.embedding <#> query_embedding
    LIMIT match_count;
$$;